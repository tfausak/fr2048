module fr2048.Board where

import fr2048.Direction (Direction)
import fr2048.Point as P (Point)
import fr2048.Tile (Tile)
import fr2048.Vector as V (Vector)

import Data.List (transpose)

type Board = [Vector]

canMove :: Board -> Direction -> Bool
canMove b d = move b d /= b

canShift :: Board -> Bool
canShift b = shift b /= b

empty :: Int -> Int -> Board
empty = flip replicate . V.empty

emptyPoints :: Board -> [Point]
emptyPoints b = zip [0 ..] (fmap V.emptyIndexes b) >>= go
  where
    go (x, ys) = fmap ((,) x) ys

move :: Board -> Direction -> Board
move b d = rotateFrom (shift (rotateTo b d)) d

render :: Board -> String
render = unlines . fmap V.render

rotate :: Board -> Board
rotate = fmap reverse . transpose

rotateFrom :: Board -> Direction -> Board
rotateFrom b d = head (drop n gs)
  where
    n = 1 + fromEnum (maxBound :: Direction) - fromEnum d
    gs = iterate rotate b

rotateTo :: Board -> Direction -> Board
rotateTo b d = head (drop n gs)
  where
    n = fromEnum d
    gs = iterate rotate b

score :: Board -> Int
score = sum . fmap V.score

set :: Board -> Tile -> Point -> Board
set b t p = zipWith go [0 ..] b
  where
    go i v = if i == P.x p then V.set v t (P.y p) else v

shift :: Board -> Board
shift = fmap V.shift
